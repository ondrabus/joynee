AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: JoyneeWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  WebSocketLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/JoyneeWebSocketApi
      RetentionInDays: 7
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: JoyneeHttpApi
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
        - '*'
        AllowMethods:
        - GET
        - POST
        - OPTIONS
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/JoyneeHttpApi
      RetentionInDays: 7
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AuthorizerFunction
      Handler: authorizer.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          USER_POOL_ID: eu-central-1_ctYny8QH0
          APP_CLIENT_ID: 4o23nih1tkg316mvhucp0b2p3o
          NODE_OPTIONS: ' --enable-source-maps'
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - src/authorizer.ts
        External:
        - aws-sdk
        - aws-lambda
        Minify: false
        Sourcemap: true
        Target: es2020
      SamResourceId: AuthorizerFunction
  AuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - WebSocketApi
    - AuthorizerFunction
    Properties:
      FunctionName:
        Ref: AuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  WebSocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId:
        Ref: WebSocketApi
      AuthorizerType: REQUEST
      Name: JoyneeCognitoAuth
      AuthorizerUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations
      IdentitySource:
      - route.request.querystring.idToken
  HttpAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId:
        Ref: HttpApi
      AuthorizerType: REQUEST
      Name: JoyneeCognitoAuth
      AuthorizerUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations
      IdentitySource:
      - $request.header.Authorization
      AuthorizerPayloadFormatVersion: '1.0'
  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ConnectFunction
      Handler: connect.handler
      Runtime: nodejs18.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ConnectionsTable
      Environment:
        Variables:
          CONNECTIONS_TABLE:
            Ref: ConnectionsTable
          NODE_OPTIONS: ' --enable-source-maps'
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - src/connect.ts
        External:
        - aws-sdk
        - aws-lambda
        Minify: false
        Sourcemap: true
        Target: es2020
      SamResourceId: ConnectFunction
  ConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - WebSocketApi
    - ConnectFunction
    Properties:
      FunctionName:
        Ref: ConnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DisconnectFunction
      Handler: disconnect.handler
      Runtime: nodejs18.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ConnectionsTable
      Environment:
        Variables:
          CONNECTIONS_TABLE:
            Ref: ConnectionsTable
          NODE_OPTIONS: ' --enable-source-maps'
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - src/disconnect.ts
        External:
        - aws-sdk
        - aws-lambda
        Minify: false
        Sourcemap: true
        Target: es2020
      SamResourceId: DisconnectFunction
  DisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - WebSocketApi
    - DisconnectFunction
    Properties:
      FunctionName:
        Ref: DisconnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SendMessageFunction
      Handler: send_message.handler
      Runtime: nodejs18.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ConnectionsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ChatTable
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
            Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/@connections/*
      Environment:
        Variables:
          CHAT_TABLE:
            Ref: ChatTable
          CONNECTIONS_TABLE:
            Ref: ConnectionsTable
          WEBSOCKET_ENDPOINT:
            Fn::Sub: https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev
          NODE_OPTIONS: ' --enable-source-maps'
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - src/send_message.ts
        External:
        - aws-sdk
        - aws-lambda
        Minify: false
        Sourcemap: true
        Target: es2020
      SamResourceId: SendMessageFunction
  SendMessageFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - WebSocketApi
    - SendMessageFunction
    Properties:
      FunctionName:
        Ref: SendMessageFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  CreateConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateConversationFunction
      Handler: create_conversation.handler
      Runtime: nodejs18.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ConnectionsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ChatTable
      Environment:
        Variables:
          CHAT_TABLE:
            Ref: ChatTable
          CONNECTIONS_TABLE:
            Ref: ConnectionsTable
          NODE_OPTIONS: ' --enable-source-maps'
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - src/create_conversation.ts
        External:
        - aws-sdk
        - aws-lambda
        Minify: false
        Sourcemap: true
        Target: es2020
      SamResourceId: CreateConversationFunction
  CreateConversationFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - HttpApi
    - CreateConversationFunction
    Properties:
      FunctionName:
        Ref: CreateConversationFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  DefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DefaultFunction
      Handler: default.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          NODE_OPTIONS: ' --enable-source-maps'
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - src/default.ts
        Minify: false
        Sourcemap: true
        Target: es2020
      SamResourceId: DefaultFunction
  DefaultFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - WebSocketApi
    - DefaultFunction
    Properties:
      FunctionName:
        Ref: DefaultFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations
      IntegrationMethod: POST
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations
      IntegrationMethod: POST
  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
      IntegrationMethod: POST
  CreateConversationIntegration2:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateConversationFunction.Arn}/invocations
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations
      IntegrationMethod: POST
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: WebSocketAuthorizer
      Target:
        Fn::Sub: integrations/${ConnectIntegration}
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $disconnect
      Target:
        Fn::Sub: integrations/${DisconnectIntegration}
  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: sendMessage
      Target:
        Fn::Sub: integrations/${SendMessageIntegration}
  CreateConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: HttpApi
      RouteKey: POST /createConversation
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: HttpAuthorizer
      Target:
        Fn::Sub: integrations/${CreateConversationIntegration2}
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $default
      Target:
        Fn::Sub: integrations/${DefaultIntegration}
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId:
        Ref: WebSocketApi
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    - SendMessageRoute
    - DefaultRoute
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WebSocketApi
      StageName: dev
      DeploymentId:
        Ref: WebSocketDeployment
      AccessLogSettings:
        DestinationArn:
          Fn::GetAtt:
          - WebSocketLogGroup
          - Arn
        Format: '{ "requestId": "$context.requestId", "extendedRequestId":"$context.extendedRequestId",
          "connectionId":"$context.connectionId", "userId": "$context.authorizer.userId",
          "domainName":"$context.domainName", "stage":"$context.stage", "routeKey":"$context.routeKey",
          "status":"$context.status", "requestTime": "$context.requestTime", "requestTimeEpoch":
          "$context.requestTimeEpoch", "sourceIp": "$context.identity.sourceIp", "userAgent":
          "$context.identity.userAgent", "errorMessage": "$context.error.message",
          "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath"
          }'
  HttpDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId:
        Ref: HttpApi
    DependsOn:
    - CreateConversationRoute
  HttpStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: HttpApi
      StageName: dev
      DeploymentId:
        Ref: HttpDeployment
      AccessLogSettings:
        DestinationArn:
          Fn::GetAtt:
          - ApiLogGroup
          - Arn
        Format: '{ "requestId": "$context.requestId", "extendedRequestId": "$context.extendedRequestId",
          "domainName": "$context.domainName", "stage": "$context.stage", "status":
          "$context.status", "requestTime": "$context.requestTime", "requestTimeEpoch":
          "$context.requestTimeEpoch", "responseLength": "$context.responseLength"
          }'
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ConnectionsTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: connectionId
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: ConnectionIdIndex
        KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  ChatTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
Outputs:
  WebSocketURI:
    Value:
      Fn::Sub: wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev
